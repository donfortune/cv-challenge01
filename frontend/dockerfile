# # Stage 1: Build the frontend application
# FROM node:18-alpine as build

# # Set working directory
# WORKDIR /app

# # Copy package.json and package-lock.json to the container
# COPY package.json package-lock.json ./

# # Install dependencies
# RUN npm ci

# # Copy the rest of the application
# COPY . .

# # Build the frontend application
# RUN npm run build

# # Stage 2: Serve the optimized build with a lightweight server
# FROM nginx:stable-alpine as production

# # Copy the build output to nginx's default directory
# COPY --from=build /app/dist /usr/share/nginx/html

# # Expose port 80
# EXPOSE 80

# # Start nginx
# CMD ["nginx", "-g", "daemon off;"]


# # # Stage 1: Build the frontend application
# # FROM node:18-alpine as build

# # # Set working directory
# # WORKDIR /app

# # # Copy package.json and package-lock.json to the container
# # COPY package.json package-lock.json ./

# # # Install dependencies
# # RUN npm ci

# # # Copy the rest of the application
# # COPY . .

# # # Build the frontend application
# # RUN npm run build

# # # Stage 2: Serve the optimized build with a lightweight server
# # FROM nginx:stable-alpine as production

# # # Copy custom Nginx configuration (if any)
# # COPY nginx.conf /etc/nginx/conf.d/default.conf

# # # Copy the build output to nginx's default directory
# # COPY --from=build /app/dist /usr/share/nginx/html

# # # Expose port 80
# # EXPOSE 80

# # # Start nginx
# # CMD ["nginx", "-g", "daemon off;"]


# # # Stage 1: Build the frontend application
# # FROM node:18-alpine as build

# # # Set working directory
# # WORKDIR /app

# # # Copy package.json and package-lock.json to the container
# # COPY package.json package-lock.json ./

# # # Install dependencies
# # RUN npm ci

# # # Copy the rest of the application
# # COPY . .

# # # Build the frontend application
# # RUN npm run build

# # # Stage 2: Serve the optimized build with a lightweight server
# # FROM nginx:stable-alpine as production

# # # Copy the build output to nginx's default directory
# # COPY --from=build /app/build /usr/share/nginx/html

# # # Expose port 80
# # EXPOSE 80

# # # Start nginx
# # CMD ["nginx", "-g", "daemon off;"]

# Use the latest official Node.js image as a base
FROM node:alpine

# Set the working directory
WORKDIR /app

# Copy the application files
COPY . .

# Install dependencies
RUN npm install

# Expose the port the development server runs on
EXPOSE 5173

# Run the development server
CMD ["npm", "run", "dev", "--", "--host"]
